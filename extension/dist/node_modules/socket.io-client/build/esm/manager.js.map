{"version":3,"file":"manager.js","sources":["../../../../../node_modules/socket.io-client/build/esm/manager.js"],"sourcesContent":["import { Socket as Engine, installTimerFunctions, nextTick, } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        if (!v) {\n            this.skipReconnect = true;\n        }\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Engine(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        const onError = (err) => {\n            this.cleanup();\n            this._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                this.maybeReconnectOnOpen();\n            }\n        };\n        // emit `error`\n        const errorSub = on(socket, \"error\", onError);\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                onError(new Error(\"timeout\"));\n                socket.close();\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), \n        // @ts-ignore\n        on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        try {\n            this.decoder.add(data);\n        }\n        catch (e) {\n            this.onclose(\"parse error\", e);\n        }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n        nextTick(() => {\n            this.emitReserved(\"packet\", packet);\n        }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        else if (this._autoConnect && !socket.active) {\n            socket.connect();\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called when:\n     *\n     * - the low-level engine is closed\n     * - the parser encountered a badly formatted packet\n     * - all sockets are disconnected\n     *\n     * @private\n     */\n    onclose(reason, description) {\n        var _a;\n        this.cleanup();\n        (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n"],"names":["Manager","Emitter","uri","opts","_a","installTimerFunctions","Backoff","_parser","parser","v","fn","Engine","socket","self","openSubDestroy","on","onError","err","errorSub","timeout","timer","data","e","packet","nextTick","nsp","Socket","nsps","encodedPackets","i","subDestroy","reason","description","delay","attempt"],"mappings":";;;;;;;;;;;;;AAMO,MAAMA,UAAgBC,EAAQ;AAAA,EACjC,YAAYC,GAAKC,GAAM;AACnB,QAAIC;AACJ,UAAO,GACP,KAAK,OAAO,CAAE,GACd,KAAK,OAAO,CAAE,GACVF,KAAoB,OAAOA,KAApB,aACPC,IAAOD,GACPA,IAAM,SAEVC,IAAOA,KAAQ,CAAE,GACjBA,EAAK,OAAOA,EAAK,QAAQ,cACzB,KAAK,OAAOA,GACZE,EAAsB,MAAMF,CAAI,GAChC,KAAK,aAAaA,EAAK,iBAAiB,EAAK,GAC7C,KAAK,qBAAqBA,EAAK,wBAAwB,KAAQ,GAC/D,KAAK,kBAAkBA,EAAK,qBAAqB,GAAI,GACrD,KAAK,qBAAqBA,EAAK,wBAAwB,GAAI,GAC3D,KAAK,qBAAqBC,IAAKD,EAAK,yBAAyB,QAAQC,MAAO,SAASA,IAAK,GAAG,GAC7F,KAAK,UAAU,IAAIE,EAAQ;AAAA,MACvB,KAAK,KAAK,kBAAmB;AAAA,MAC7B,KAAK,KAAK,qBAAsB;AAAA,MAChC,QAAQ,KAAK,oBAAqB;AAAA,IAC9C,CAAS,GACD,KAAK,QAAgBH,EAAK,WAAb,OAAuB,MAAQA,EAAK,OAAO,GACxD,KAAK,cAAc,UACnB,KAAK,MAAMD;AACX,UAAMK,IAAUJ,EAAK,UAAUK;AAC/B,SAAK,UAAU,IAAID,EAAQ,QAAS,GACpC,KAAK,UAAU,IAAIA,EAAQ,QAAS,GACpC,KAAK,eAAeJ,EAAK,gBAAgB,IACrC,KAAK,gBACL,KAAK,KAAM;AAAA,EACvB;AAAA,EACI,aAAaM,GAAG;AACZ,WAAK,UAAU,UAEf,KAAK,gBAAgB,CAAC,CAACA,GAClBA,MACD,KAAK,gBAAgB,KAElB,QALI,KAAK;AAAA,EAMxB;AAAA,EACI,qBAAqBA,GAAG;AACpB,WAAIA,MAAM,SACC,KAAK,yBAChB,KAAK,wBAAwBA,GACtB;AAAA,EACf;AAAA,EACI,kBAAkBA,GAAG;AACjB,QAAIL;AACJ,WAAIK,MAAM,SACC,KAAK,sBAChB,KAAK,qBAAqBA,IACzBL,IAAK,KAAK,aAAa,QAAQA,MAAO,UAAkBA,EAAG,OAAOK,CAAC,GAC7D;AAAA,EACf;AAAA,EACI,oBAAoBA,GAAG;AACnB,QAAIL;AACJ,WAAIK,MAAM,SACC,KAAK,wBAChB,KAAK,uBAAuBA,IAC3BL,IAAK,KAAK,aAAa,QAAQA,MAAO,UAAkBA,EAAG,UAAUK,CAAC,GAChE;AAAA,EACf;AAAA,EACI,qBAAqBA,GAAG;AACpB,QAAIL;AACJ,WAAIK,MAAM,SACC,KAAK,yBAChB,KAAK,wBAAwBA,IAC5BL,IAAK,KAAK,aAAa,QAAQA,MAAO,UAAkBA,EAAG,OAAOK,CAAC,GAC7D;AAAA,EACf;AAAA,EACI,QAAQA,GAAG;AACP,WAAK,UAAU,UAEf,KAAK,WAAWA,GACT,QAFI,KAAK;AAAA,EAGxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOI,uBAAuB;AAEnB,IAAI,CAAC,KAAK,iBACN,KAAK,iBACL,KAAK,QAAQ,aAAa,KAE1B,KAAK,UAAW;AAAA,EAE5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQI,KAAKC,GAAI;AACL,QAAI,CAAC,KAAK,YAAY,QAAQ,MAAM;AAChC,aAAO;AACX,SAAK,SAAS,IAAIC,EAAO,KAAK,KAAK,KAAK,IAAI;AAC5C,UAAMC,IAAS,KAAK,QACdC,IAAO;AACb,SAAK,cAAc,WACnB,KAAK,gBAAgB;AAErB,UAAMC,IAAiBC,EAAGH,GAAQ,QAAQ,WAAY;AAClD,MAAAC,EAAK,OAAQ,GACbH,KAAMA,EAAI;AAAA,IACtB,CAAS,GACKM,IAAU,CAACC,MAAQ;AACrB,WAAK,QAAS,GACd,KAAK,cAAc,UACnB,KAAK,aAAa,SAASA,CAAG,GAC1BP,IACAA,EAAGO,CAAG,IAIN,KAAK,qBAAsB;AAAA,IAElC,GAEKC,IAAWH,EAAGH,GAAQ,SAASI,CAAO;AAC5C,QAAc,KAAK,aAAf,IAAyB;AACzB,YAAMG,IAAU,KAAK,UAEfC,IAAQ,KAAK,aAAa,MAAM;AAClC,QAAAN,EAAgB,GAChBE,EAAQ,IAAI,MAAM,SAAS,CAAC,GAC5BJ,EAAO,MAAO;AAAA,MACjB,GAAEO,CAAO;AACV,MAAI,KAAK,KAAK,aACVC,EAAM,MAAO,GAEjB,KAAK,KAAK,KAAK,MAAM;AACjB,aAAK,eAAeA,CAAK;AAAA,MACzC,CAAa;AAAA,IACb;AACQ,gBAAK,KAAK,KAAKN,CAAc,GAC7B,KAAK,KAAK,KAAKI,CAAQ,GAChB;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOI,QAAQR,GAAI;AACR,WAAO,KAAK,KAAKA,CAAE;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMI,SAAS;AAEL,SAAK,QAAS,GAEd,KAAK,cAAc,QACnB,KAAK,aAAa,MAAM;AAExB,UAAME,IAAS,KAAK;AACpB,SAAK,KAAK;AAAA,MAAKG,EAAGH,GAAQ,QAAQ,KAAK,OAAO,KAAK,IAAI,CAAC;AAAA,MAAGG,EAAGH,GAAQ,QAAQ,KAAK,OAAO,KAAK,IAAI,CAAC;AAAA,MAAGG,EAAGH,GAAQ,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AAAA,MAAGG,EAAGH,GAAQ,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AAAA;AAAA,MAEhMG,EAAG,KAAK,SAAS,WAAW,KAAK,UAAU,KAAK,IAAI,CAAC;AAAA,IAAC;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMI,SAAS;AACL,SAAK,aAAa,MAAM;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMI,OAAOM,GAAM;AACT,QAAI;AACA,WAAK,QAAQ,IAAIA,CAAI;AAAA,IACjC,SACeC,GAAG;AACN,WAAK,QAAQ,eAAeA,CAAC;AAAA,IACzC;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMI,UAAUC,GAAQ;AAEd,IAAAC,EAAS,MAAM;AACX,WAAK,aAAa,UAAUD,CAAM;AAAA,IAC9C,GAAW,KAAK,YAAY;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMI,QAAQN,GAAK;AACT,SAAK,aAAa,SAASA,CAAG;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOI,OAAOQ,GAAKtB,GAAM;AACd,QAAIS,IAAS,KAAK,KAAKa,CAAG;AAC1B,WAAKb,IAII,KAAK,gBAAgB,CAACA,EAAO,UAClCA,EAAO,QAAS,KAJhBA,IAAS,IAAIc,EAAO,MAAMD,GAAKtB,CAAI,GACnC,KAAK,KAAKsB,CAAG,IAAIb,IAKdA;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOI,SAASA,GAAQ;AACb,UAAMe,IAAO,OAAO,KAAK,KAAK,IAAI;AAClC,eAAWF,KAAOE;AAEd,UADe,KAAK,KAAKF,CAAG,EACjB;AACP;AAGR,SAAK,OAAQ;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOI,QAAQF,GAAQ;AACZ,UAAMK,IAAiB,KAAK,QAAQ,OAAOL,CAAM;AACjD,aAASM,IAAI,GAAGA,IAAID,EAAe,QAAQC;AACvC,WAAK,OAAO,MAAMD,EAAeC,CAAC,GAAGN,EAAO,OAAO;AAAA,EAE/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMI,UAAU;AACN,SAAK,KAAK,QAAQ,CAACO,MAAeA,EAAU,CAAE,GAC9C,KAAK,KAAK,SAAS,GACnB,KAAK,QAAQ,QAAS;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMI,SAAS;AACL,SAAK,gBAAgB,IACrB,KAAK,gBAAgB,IACrB,KAAK,QAAQ,cAAc;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMI,aAAa;AACT,WAAO,KAAK,OAAQ;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUI,QAAQC,GAAQC,GAAa;AACzB,QAAI5B;AACJ,SAAK,QAAS,IACbA,IAAK,KAAK,YAAY,QAAQA,MAAO,UAAkBA,EAAG,MAAO,GAClE,KAAK,QAAQ,MAAO,GACpB,KAAK,cAAc,UACnB,KAAK,aAAa,SAAS2B,GAAQC,CAAW,GAC1C,KAAK,iBAAiB,CAAC,KAAK,iBAC5B,KAAK,UAAW;AAAA,EAE5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMI,YAAY;AACR,QAAI,KAAK,iBAAiB,KAAK;AAC3B,aAAO;AACX,UAAMnB,IAAO;AACb,QAAI,KAAK,QAAQ,YAAY,KAAK;AAC9B,WAAK,QAAQ,MAAO,GACpB,KAAK,aAAa,kBAAkB,GACpC,KAAK,gBAAgB;AAAA,SAEpB;AACD,YAAMoB,IAAQ,KAAK,QAAQ,SAAU;AACrC,WAAK,gBAAgB;AACrB,YAAMb,IAAQ,KAAK,aAAa,MAAM;AAClC,QAAIP,EAAK,kBAET,KAAK,aAAa,qBAAqBA,EAAK,QAAQ,QAAQ,GAExD,CAAAA,EAAK,iBAETA,EAAK,KAAK,CAACI,MAAQ;AACf,UAAIA,KACAJ,EAAK,gBAAgB,IACrBA,EAAK,UAAW,GAChB,KAAK,aAAa,mBAAmBI,CAAG,KAGxCJ,EAAK,YAAa;AAAA,QAE1C,CAAiB;AAAA,MACJ,GAAEoB,CAAK;AACR,MAAI,KAAK,KAAK,aACVb,EAAM,MAAO,GAEjB,KAAK,KAAK,KAAK,MAAM;AACjB,aAAK,eAAeA,CAAK;AAAA,MACzC,CAAa;AAAA,IACb;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMI,cAAc;AACV,UAAMc,IAAU,KAAK,QAAQ;AAC7B,SAAK,gBAAgB,IACrB,KAAK,QAAQ,MAAO,GACpB,KAAK,aAAa,aAAaA,CAAO;AAAA,EAC9C;AACA;","x_google_ignoreList":[0]}