import { url as u } from "./url.js";
import { Manager as a } from "./manager.js";
import { Socket as l } from "./socket.js";
import { protocol as R } from "../../../socket.io-parser/build/esm/index.js";
import "../../../engine.io-client/build/esm/socket.js";
import "../../../engine.io-parser/build/esm/encodePacket.browser.js";
import "../../../engine.io-parser/build/esm/commons.js";
import "../../../engine.io-parser/build/esm/contrib/base64-arraybuffer.js";
import "../../../@socket.io/component-emitter/lib/esm/index.js";
import "../../../engine.io-client/build/esm/util.js";
import { XHR as g, XHR as j } from "../../../engine.io-client/build/esm/transports/polling-xhr.js";
import { WS as K, WS as M } from "../../../engine.io-client/build/esm/transports/websocket.js";
import "../../../engine.io-client/build/esm/globals.js";
const r = {};
function i(c, e) {
  typeof c == "object" && (e = c, c = void 0), e = e || {};
  const o = u(c, e.path || "/socket.io"), m = o.source, t = o.id, f = o.path, s = r[t] && f in r[t].nsps, p = e.forceNew || e["force new connection"] || e.multiplex === !1 || s;
  let n;
  return p ? n = new a(m, e) : (r[t] || (r[t] = new a(m, e)), n = r[t]), o.query && !e.query && (e.query = o.queryKey), n.socket(o.path, e);
}
Object.assign(i, {
  Manager: a,
  Socket: l,
  io: i,
  connect: i
});
export {
  a as Manager,
  K as NodeWebSocket,
  g as NodeXHR,
  l as Socket,
  M as WebSocket,
  j as XHR,
  i as connect,
  i as default,
  i as io,
  R as protocol
};
//# sourceMappingURL=index.js.map
