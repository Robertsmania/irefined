{"version":3,"file":"index.js","sources":["../../../node_modules/select-dom/index.js"],"sourcesContent":["// Type predicate for TypeScript\nfunction isQueryable(object) {\n    return typeof object.querySelectorAll === 'function';\n}\nfunction $(selectors, baseElement) {\n    // Shortcut with specified-but-null baseElement\n    if (arguments.length === 2 && !baseElement) {\n        return;\n    }\n    return (baseElement ?? document).querySelector(String(selectors)) ?? undefined;\n}\nexport class ElementNotFoundError extends Error {\n    name = 'ElementNotFoundError';\n}\nfunction expectElement(selectors, baseElement) {\n    // Shortcut with specified-but-null baseElement\n    if (arguments.length === 2 && !baseElement) {\n        throw new ElementNotFoundError('Expected element not found because the base is specified but null');\n    }\n    const element = (baseElement ?? document).querySelector(String(selectors));\n    if (element) {\n        return element;\n    }\n    throw new ElementNotFoundError(`Expected element not found: ${String(selectors)}`);\n}\nfunction lastElement(selectors, baseElement) {\n    // Shortcut with specified-but-null baseElement\n    if (arguments.length === 2 && !baseElement) {\n        return undefined;\n    }\n    const all = (baseElement ?? document).querySelectorAll(String(selectors));\n    // eslint-disable-next-line unicorn/prefer-at -- Not an Array, not worth converting it\n    return all[all.length - 1];\n}\n/**\n * @param selectors      One or more CSS selectors separated by commas\n * @param [baseElement]  The element to look inside of\n * @return               Whether it's been found\n */\nfunction elementExists(selectors, baseElement) {\n    // Shortcut with specified-but-null baseElement\n    if (arguments.length === 2 && !baseElement) {\n        return false;\n    }\n    return Boolean((baseElement ?? document).querySelector(String(selectors)));\n}\n/**\n * @param selectors      One or more CSS selectors separated by commas\n * @param [baseElement]  The element to look inside of\n * @return               The number of elements found\n */\nfunction countElements(selectors, baseElement) {\n    // Shortcut with specified-but-null baseElement\n    if (arguments.length === 2 && !baseElement) {\n        return 0;\n    }\n    return (baseElement ?? document).querySelectorAll(String(selectors)).length;\n}\nfunction $$(selectors, baseElements) {\n    // Shortcut with specified-but-null baseElements\n    if (arguments.length === 2 && !baseElements) {\n        return [];\n    }\n    // Can be: select.all('selectors') or select.all('selectors', singleElementOrDocument)\n    if (!baseElements || isQueryable(baseElements)) {\n        const elements = (baseElements ?? document).querySelectorAll(String(selectors));\n        return Array.prototype.slice.call(elements);\n    }\n    const elements = new Set();\n    for (const baseElement of baseElements) {\n        for (const element of baseElement.querySelectorAll(String(selectors))) {\n            elements.add(element);\n        }\n    }\n    return [...elements]; // Convert to array\n}\nfunction expectElements(selectors, baseElements) {\n    // Shortcut with specified-but-null baseElements\n    if (arguments.length === 2 && !baseElements) {\n        throw new ElementNotFoundError('Expected elements not found because the base is specified but null');\n    }\n    const elements = $$(selectors, baseElements);\n    if (elements.length > 0) {\n        return elements;\n    }\n    throw new ElementNotFoundError(`Expected elements not found: ${String(selectors)}`);\n}\nexport { $, $$, lastElement, elementExists, expectElement, expectElements, countElements };\n"],"names":["$","selectors","baseElement","elementExists","$$","baseElements","elements"],"mappings":"AAIA,SAASA,EAAEC,GAAWC,GAAa;AAE/B,MAAI,UAAU,WAAW;AAGzB,YAAQA,KAAe,UAAU,cAAc,OAAOD,CAAS,CAAC,KAAK;AACzE;AA6BA,SAASE,EAAcF,GAAWC,GAAa;AAE3C,SAAI,UAAU,WAAW,IACd,KAEJ,EAAwB,SAAU,cAAc,OAAOD,CAAS,CAAC;AAC5E;AAaA,SAASG,EAAGH,GAAWI,GAAc;AAEjC,MAAI,UAAU,WAAW;AACrB,WAAO,CAAE;AAGmC;AAC5C,UAAMC,IAA4B,SAAU,iBAAiB,OAAOL,CAAS,CAAC;AAC9E,WAAO,MAAM,UAAU,MAAM,KAAKK,CAAQ;AAAA,EAClD;AAQA;","x_google_ignoreList":[0]}