{"version":3,"file":"decodePacket.browser.js","sources":["../../../../../node_modules/engine.io-parser/build/esm/decodePacket.browser.js"],"sourcesContent":["import { ERROR_PACKET, PACKET_TYPES_REVERSE, } from \"./commons.js\";\nimport { decode } from \"./contrib/base64-arraybuffer.js\";\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nexport const decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n        return {\n            type: \"message\",\n            data: mapBinary(encodedPacket, binaryType),\n        };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n        return {\n            type: \"message\",\n            data: decodeBase64Packet(encodedPacket.substring(1), binaryType),\n        };\n    }\n    const packetType = PACKET_TYPES_REVERSE[type];\n    if (!packetType) {\n        return ERROR_PACKET;\n    }\n    return encodedPacket.length > 1\n        ? {\n            type: PACKET_TYPES_REVERSE[type],\n            data: encodedPacket.substring(1),\n        }\n        : {\n            type: PACKET_TYPES_REVERSE[type],\n        };\n};\nconst decodeBase64Packet = (data, binaryType) => {\n    if (withNativeArrayBuffer) {\n        const decoded = decode(data);\n        return mapBinary(decoded, binaryType);\n    }\n    else {\n        return { base64: true, data }; // fallback for old browsers\n    }\n};\nconst mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n        case \"blob\":\n            if (data instanceof Blob) {\n                // from WebSocket + binaryType \"blob\"\n                return data;\n            }\n            else {\n                // from HTTP long-polling or WebTransport\n                return new Blob([data]);\n            }\n        case \"arraybuffer\":\n        default:\n            if (data instanceof ArrayBuffer) {\n                // from HTTP long-polling (base64) or WebSocket + binaryType \"arraybuffer\"\n                return data;\n            }\n            else {\n                // from WebTransport (Uint8Array)\n                return data.buffer;\n            }\n    }\n};\n"],"names":["withNativeArrayBuffer","decodePacket","encodedPacket","binaryType","mapBinary","type","decodeBase64Packet","PACKET_TYPES_REVERSE","ERROR_PACKET","data","decoded","decode"],"mappings":";;AAEA,MAAMA,IAAwB,OAAO,eAAgB,YACxCC,IAAe,CAACC,GAAeC,MAAe;AACvD,MAAI,OAAOD,KAAkB;AACzB,WAAO;AAAA,MACH,MAAM;AAAA,MACN,MAAME,EAAUF,GAAeC,CAAU;AAAA,IAC5C;AAEL,QAAME,IAAOH,EAAc,OAAO,CAAC;AACnC,SAAIG,MAAS,MACF;AAAA,IACH,MAAM;AAAA,IACN,MAAMC,EAAmBJ,EAAc,UAAU,CAAC,GAAGC,CAAU;AAAA,EAClE,IAEcI,EAAqBF,CAAI,IAIrCH,EAAc,SAAS,IACxB;AAAA,IACE,MAAMK,EAAqBF,CAAI;AAAA,IAC/B,MAAMH,EAAc,UAAU,CAAC;AAAA,EAC3C,IACU;AAAA,IACE,MAAMK,EAAqBF,CAAI;AAAA,EAClC,IATMG;AAUf,GACMF,IAAqB,CAACG,GAAMN,MAAe;AAC7C,MAAIH,GAAuB;AACvB,UAAMU,IAAUC,EAAOF,CAAI;AAC3B,WAAOL,EAAUM,GAASP,CAAU;AAAA,EAC5C;AAEQ,WAAO,EAAE,QAAQ,IAAM,MAAAM;AAE/B,GACML,IAAY,CAACK,GAAMN,MAAe;AACpC,UAAQA,GAAU;AAAA,IACd,KAAK;AACD,aAAIM,aAAgB,OAETA,IAIA,IAAI,KAAK,CAACA,CAAI,CAAC;AAAA,IAE9B,KAAK;AAAA,IACL;AACI,aAAIA,aAAgB,cAETA,IAIAA,EAAK;AAAA,EAE5B;AACA;","x_google_ignoreList":[0]}