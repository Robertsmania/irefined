{"version":3,"file":"encodePacket.browser.js","sources":["../../../../../node_modules/engine.io-parser/build/esm/encodePacket.browser.js"],"sourcesContent":["import { PACKET_TYPES } from \"./commons.js\";\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj && obj.buffer instanceof ArrayBuffer;\n};\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\n    if (withNativeBlob && data instanceof Blob) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(data, callback);\n        }\n    }\n    else if (withNativeArrayBuffer &&\n        (data instanceof ArrayBuffer || isView(data))) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(new Blob([data]), callback);\n        }\n    }\n    // plain string\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n};\nconst encodeBlobAsBase64 = (data, callback) => {\n    const fileReader = new FileReader();\n    fileReader.onload = function () {\n        const content = fileReader.result.split(\",\")[1];\n        callback(\"b\" + (content || \"\"));\n    };\n    return fileReader.readAsDataURL(data);\n};\nfunction toArray(data) {\n    if (data instanceof Uint8Array) {\n        return data;\n    }\n    else if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    else {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    }\n}\nlet TEXT_ENCODER;\nexport function encodePacketToBinary(packet, callback) {\n    if (withNativeBlob && packet.data instanceof Blob) {\n        return packet.data.arrayBuffer().then(toArray).then(callback);\n    }\n    else if (withNativeArrayBuffer &&\n        (packet.data instanceof ArrayBuffer || isView(packet.data))) {\n        return callback(toArray(packet.data));\n    }\n    encodePacket(packet, false, (encoded) => {\n        if (!TEXT_ENCODER) {\n            TEXT_ENCODER = new TextEncoder();\n        }\n        callback(TEXT_ENCODER.encode(encoded));\n    });\n}\nexport { encodePacket };\n"],"names":["withNativeBlob","withNativeArrayBuffer","isView","obj","encodePacket","type","data","supportsBinary","callback","encodeBlobAsBase64","PACKET_TYPES","fileReader","content","toArray","TEXT_ENCODER","encodePacketToBinary","packet","encoded"],"mappings":";AACA,MAAMA,IAAiB,OAAO,QAAS,cAClC,OAAO,OAAS,OACb,OAAO,UAAU,SAAS,KAAK,IAAI,MAAM,4BAC3CC,IAAwB,OAAO,eAAgB,YAE/CC,IAAS,CAACC,MACL,OAAO,YAAY,UAAW,aAC/B,YAAY,OAAOA,CAAG,IACtBA,KAAOA,EAAI,kBAAkB,aAEjCC,IAAe,CAAC,EAAE,MAAAC,GAAM,MAAAC,EAAI,GAAIC,GAAgBC,MAC9CR,KAAkBM,aAAgB,OAC9BC,IACOC,EAASF,CAAI,IAGbG,EAAmBH,GAAME,CAAQ,IAGvCP,MACJK,aAAgB,eAAeJ,EAAOI,CAAI,KACvCC,IACOC,EAASF,CAAI,IAGbG,EAAmB,IAAI,KAAK,CAACH,CAAI,CAAC,GAAGE,CAAQ,IAIrDA,EAASE,EAAaL,CAAI,KAAKC,KAAQ,GAAG,GAE/CG,IAAqB,CAACH,GAAME,MAAa;AAC3C,QAAMG,IAAa,IAAI,WAAY;AACnC,SAAAA,EAAW,SAAS,WAAY;AAC5B,UAAMC,IAAUD,EAAW,OAAO,MAAM,GAAG,EAAE,CAAC;AAC9C,IAAAH,EAAS,OAAOI,KAAW,GAAG;AAAA,EACjC,GACMD,EAAW,cAAcL,CAAI;AACxC;AACA,SAASO,EAAQP,GAAM;AACnB,SAAIA,aAAgB,aACTA,IAEFA,aAAgB,cACd,IAAI,WAAWA,CAAI,IAGnB,IAAI,WAAWA,EAAK,QAAQA,EAAK,YAAYA,EAAK,UAAU;AAE3E;AACA,IAAIQ;AACG,SAASC,EAAqBC,GAAQR,GAAU;AACnD,MAAIR,KAAkBgB,EAAO,gBAAgB;AACzC,WAAOA,EAAO,KAAK,YAAa,EAAC,KAAKH,CAAO,EAAE,KAAKL,CAAQ;AAE3D,MAAIP,MACJe,EAAO,gBAAgB,eAAed,EAAOc,EAAO,IAAI;AACzD,WAAOR,EAASK,EAAQG,EAAO,IAAI,CAAC;AAExC,EAAAZ,EAAaY,GAAQ,IAAO,CAACC,MAAY;AACrC,IAAKH,MACDA,IAAe,IAAI,YAAa,IAEpCN,EAASM,EAAa,OAAOG,CAAO,CAAC;AAAA,EAC7C,CAAK;AACL;","x_google_ignoreList":[0]}