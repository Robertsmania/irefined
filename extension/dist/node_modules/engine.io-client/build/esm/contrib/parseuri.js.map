{"version":3,"file":"parseuri.js","sources":["../../../../../../node_modules/engine.io-client/build/esm/contrib/parseuri.js"],"sourcesContent":["// imported from https://github.com/galkn/parseuri\n/**\n * Parses a URI\n *\n * Note: we could also have used the built-in URL object, but it isn't supported on all platforms.\n *\n * See:\n * - https://developer.mozilla.org/en-US/docs/Web/API/URL\n * - https://caniuse.com/url\n * - https://www.rfc-editor.org/rfc/rfc3986#appendix-B\n *\n * History of the parse() method:\n * - first commit: https://github.com/socketio/socket.io-client/commit/4ee1d5d94b3906a9c052b459f1a818b15f38f91c\n * - export into its own module: https://github.com/socketio/engine.io-client/commit/de2c561e4564efeb78f1bdb1ba39ef81b2822cb3\n * - reimport: https://github.com/socketio/engine.io-client/commit/df32277c3f6d622eec5ed09f493cae3f3391d242\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\nconst re = /^(?:(?![^:@\\/?#]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@\\/?#]*)(?::([^:@\\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nconst parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\nexport function parse(str) {\n    if (str.length > 8000) {\n        throw \"URI too long\";\n    }\n    const src = str, b = str.indexOf('['), e = str.indexOf(']');\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n    let m = re.exec(str || ''), uri = {}, i = 14;\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n    return uri;\n}\nfunction pathNames(obj, path) {\n    const regx = /\\/{2,9}/g, names = path.replace(regx, \"/\").split(\"/\");\n    if (path.slice(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.slice(-1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n    return names;\n}\nfunction queryKey(uri, query) {\n    const data = {};\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n    return data;\n}\n"],"names":["re","parts","parse","str","src","b","e","m","uri","i","pathNames","queryKey","obj","path","regx","names","query","data","$0","$1","$2"],"mappings":"AAmBA,MAAMA,IAAK,uPACLC,IAAQ;AAAA,EACV;AAAA,EAAU;AAAA,EAAY;AAAA,EAAa;AAAA,EAAY;AAAA,EAAQ;AAAA,EAAY;AAAA,EAAQ;AAAA,EAAQ;AAAA,EAAY;AAAA,EAAQ;AAAA,EAAa;AAAA,EAAQ;AAAA,EAAS;AACzI;AACO,SAASC,EAAMC,GAAK;AACvB,MAAIA,EAAI,SAAS;AACb,UAAM;AAEV,QAAMC,IAAMD,GAAKE,IAAIF,EAAI,QAAQ,GAAG,GAAGG,IAAIH,EAAI,QAAQ,GAAG;AAC1D,EAAIE,KAAK,MAAMC,KAAK,OAChBH,IAAMA,EAAI,UAAU,GAAGE,CAAC,IAAIF,EAAI,UAAUE,GAAGC,CAAC,EAAE,QAAQ,MAAM,GAAG,IAAIH,EAAI,UAAUG,GAAGH,EAAI,MAAM;AAEpG,MAAII,IAAIP,EAAG,KAAKG,KAAO,EAAE,GAAGK,IAAM,IAAIC,IAAI;AAC1C,SAAOA;AACH,IAAAD,EAAIP,EAAMQ,CAAC,CAAC,IAAIF,EAAEE,CAAC,KAAK;AAE5B,SAAIJ,KAAK,MAAMC,KAAK,OAChBE,EAAI,SAASJ,GACbI,EAAI,OAAOA,EAAI,KAAK,UAAU,GAAGA,EAAI,KAAK,SAAS,CAAC,EAAE,QAAQ,MAAM,GAAG,GACvEA,EAAI,YAAYA,EAAI,UAAU,QAAQ,KAAK,EAAE,EAAE,QAAQ,KAAK,EAAE,EAAE,QAAQ,MAAM,GAAG,GACjFA,EAAI,UAAU,KAElBA,EAAI,YAAYE,EAAUF,GAAKA,EAAI,IAAO,GAC1CA,EAAI,WAAWG,EAASH,GAAKA,EAAI,KAAQ,GAClCA;AACX;AACA,SAASE,EAAUE,GAAKC,GAAM;AAC1B,QAAMC,IAAO,YAAYC,IAAQF,EAAK,QAAQC,GAAM,GAAG,EAAE,MAAM,GAAG;AAClE,UAAID,EAAK,MAAM,GAAG,CAAC,KAAK,OAAOA,EAAK,WAAW,MAC3CE,EAAM,OAAO,GAAG,CAAC,GAEjBF,EAAK,MAAM,EAAE,KAAK,OAClBE,EAAM,OAAOA,EAAM,SAAS,GAAG,CAAC,GAE7BA;AACX;AACA,SAASJ,EAASH,GAAKQ,GAAO;AAC1B,QAAMC,IAAO,CAAE;AACf,SAAAD,EAAM,QAAQ,6BAA6B,SAAUE,GAAIC,GAAIC,GAAI;AAC7D,IAAID,MACAF,EAAKE,CAAE,IAAIC;AAAA,EAEvB,CAAK,GACMH;AACX;","x_google_ignoreList":[0]}