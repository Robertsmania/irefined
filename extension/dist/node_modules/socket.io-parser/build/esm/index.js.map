{"version":3,"file":"index.js","sources":["../../../../../node_modules/socket.io-parser/build/esm/index.js"],"sourcesContent":["import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * These strings must not be used as event names, as they have a special meaning.\n */\nconst RESERVED_EVENTS = [\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    \"newListener\",\n    \"removeListener\", // used by the Node.js EventEmitter\n];\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n        this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                return this.encodeAsBinary({\n                    type: obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK,\n                    nsp: obj.nsp,\n                    data: obj.data,\n                    id: obj.id,\n                });\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data, this.replacer);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n// see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n        super();\n        this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n                packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = this.tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    tryParse(str) {\n        try {\n            return JSON.parse(str, this.reviver);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return isObject(payload);\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || isObject(payload);\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return (Array.isArray(payload) &&\n                    (typeof payload[0] === \"number\" ||\n                        (typeof payload[0] === \"string\" &&\n                            RESERVED_EVENTS.indexOf(payload[0]) === -1)));\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n            this.reconstructor = null;\n        }\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n"],"names":["RESERVED_EVENTS","protocol","PacketType","Encoder","replacer","obj","hasBinary","str","deconstruction","deconstructPacket","pack","buffers","isObject","value","Decoder","Emitter","reviver","packet","isBinaryEvent","BinaryReconstructor","isBinary","i","p","start","buf","next","payload","type","binData","reconstructPacket"],"mappings":"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","x_google_ignoreList":[0]}