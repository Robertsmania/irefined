import { getFeatureID as p } from "../helpers/feature-helpers.js";
import s from "../feature-manager.js";
/* empty css                   */
import e from "../node_modules/dom-chef/index.js";
import { $ as o } from "../node_modules/select-dom/index.js";
async function g(c = !0) {
  if (!c)
    return;
  const l = (a) => {
    o("#update-content-modal").click(), o("body").classList.remove("iref-settings-panel-open"), o("#iref-log").scrollTop = o("#iref-log").scrollHeight;
  }, r = (a) => {
    location.reload();
  };
  let t = JSON.parse(localStorage.getItem("iref_settings")) || {};
  const n = (a) => {
    a.target.type === "checkbox" && (t[a.target.name] = a.target.checked), a.target.type === "number" && (t[a.target.name] = parseInt(a.target.value)), a.target.type === "select-one" && (t[a.target.name] = a.target.value);
  }, m = (a) => {
    localStorage.setItem("iref_settings", JSON.stringify(t)), s.rerunAll(), l();
  }, d = /* @__PURE__ */ e.createElement("div", { id: "update-content-modal-modal-content", class: "modal-content" }, /* @__PURE__ */ e.createElement("div", { class: "modal-header" }, /* @__PURE__ */ e.createElement("a", { class: "close", onClick: l }, /* @__PURE__ */ e.createElement("i", { class: "icon-cancel" })), /* @__PURE__ */ e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24px", height: "24px", style: { float: "left", marginRight: 7 }, viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", class: "lucide lucide-rocket" }, /* @__PURE__ */ e.createElement("path", { d: "M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z" }), /* @__PURE__ */ e.createElement("path", { d: "m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z" }), /* @__PURE__ */ e.createElement("path", { d: "M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0" }), /* @__PURE__ */ e.createElement("path", { d: "M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5" })), /* @__PURE__ */ e.createElement("h6", { class: "modal-title", "data-testid": "modal-title" }, "iRefined")), /* @__PURE__ */ e.createElement("div", { id: "alert-banner-alert-1739463611065", class: "alert alert-banner m-b-0 alert-warning alert-dismissible text-overflow", role: "alert" }, /* @__PURE__ */ e.createElement("div", { class: "" }, /* @__PURE__ */ e.createElement("a", { class: "close" }, /* @__PURE__ */ e.createElement("i", { class: "icon-cancel" })), /* @__PURE__ */ e.createElement("span", null, /* @__PURE__ */ e.createElement("i", { class: "icon-caution m-r-1" }), /* @__PURE__ */ e.createElement("strong", null)))), /* @__PURE__ */ e.createElement("div", { class: "modal-body has-dynamic-height" }, /* @__PURE__ */ e.createElement("div", { id: "modal-children", class: "height-limiter", style: { maxHeight: 1244 } }, /* @__PURE__ */ e.createElement("div", { id: "modal-children-container", style: { position: "relative" } }, /* @__PURE__ */ e.createElement("div", null, /* @__PURE__ */ e.createElement("div", { class: "row" }, /* @__PURE__ */ e.createElement("div", { class: "col-xs-12" }, /* @__PURE__ */ e.createElement("h1", { class: "m-b-1" }, /* @__PURE__ */ e.createElement("strong", null, "Settings")), /* @__PURE__ */ e.createElement("label", { htmlFor: "", class: "iref-setting" }, /* @__PURE__ */ e.createElement("i", { class: "icon-information text-info", title: "Adds download and upload buttons to the session settings window so that conditions can be shared using .json" }), "Test Drive session sharing buttons", /* @__PURE__ */ e.createElement("input", { type: "checkbox", name: "share-test-session", checked: t["share-test-session"], onChange: n })), /* @__PURE__ */ e.createElement("label", { htmlFor: "", class: "iref-setting" }, /* @__PURE__ */ e.createElement("i", { class: "icon-information text-info", title: "Adds download and upload buttons to the session settings window so that session setup can be shared using .json" }), "Hosted/League session sharing buttons", /* @__PURE__ */ e.createElement("input", { type: "checkbox", name: "share-hosted-session", checked: t["share-hosted-session"], onChange: n })), /* @__PURE__ */ e.createElement("label", { htmlFor: "", class: "iref-setting" }, /* @__PURE__ */ e.createElement("i", { class: "icon-information text-info", title: "Adds queue buttons to future races to automatically register to them when available. You must select a car to queue with. Will forfeit/withdraw your current session when queued session becomes available. To reset your queue restart the UI." }), "Queue registrations", /* @__PURE__ */ e.createElement("input", { type: "checkbox", name: "auto-register", checked: t["auto-register"], onChange: n })), /* @__PURE__ */ e.createElement("label", { htmlFor: "", class: "iref-setting" }, /* @__PURE__ */ e.createElement("i", { class: "icon-information text-info", title: "Green join button will display session type. Official race sessions get an extra border. Doesn't work well with official sessions that don't go official (low attendance)." }), "Join button displays session type", /* @__PURE__ */ e.createElement("input", { type: "checkbox", name: "better-join-button", checked: t["better-join-button"], onChange: n })), /* @__PURE__ */ e.createElement("label", { htmlFor: "", class: "iref-setting" }, /* @__PURE__ */ e.createElement("i", { class: "icon-information text-info", title: "Automatically launch the sim for all or official race only sessions. Doesn't work well with official sessions that don't go official (low attendance)." }), "Auto join", /* @__PURE__ */ e.createElement("select", { name: "auto-join-type", onChange: n }, /* @__PURE__ */ e.createElement("option", { value: "race", selected: t["auto-join-type"] == "race" }, "race"), /* @__PURE__ */ e.createElement("option", { value: "all", selected: t["auto-join-type"] == "all" }, "all")), "sessions", /* @__PURE__ */ e.createElement("input", { type: "checkbox", name: "auto-join", checked: t["auto-join"], onChange: n })), /* @__PURE__ */ e.createElement("label", { htmlFor: "", class: "iref-setting" }, /* @__PURE__ */ e.createElement("i", { class: "icon-information text-info", title: "Automatically forfeit official race sessions. Only activates if the sim is running. Recommended to not forfeit before warmup and quali is complete." }), "Auto forfeit after", /* @__PURE__ */ e.createElement("input", { type: "number", name: "auto-forfeit-m", value: t["auto-forfeit-m"] || 13, onChange: n }), "minutes", /* @__PURE__ */ e.createElement("input", { type: "checkbox", name: "auto-forfeit", checked: t["auto-forfeit"], onChange: n })), /* @__PURE__ */ e.createElement("label", { htmlFor: "", class: "iref-setting" }, /* @__PURE__ */ e.createElement("i", { class: "icon-information text-info", title: "Don't show any notifications at the top of the screen." }), "No results notifications", /* @__PURE__ */ e.createElement("input", { type: "checkbox", name: "no-toasts", checked: t["no-toasts"], onChange: n })), /* @__PURE__ */ e.createElement("label", { htmlFor: "", class: "iref-setting" }, /* @__PURE__ */ e.createElement("i", { class: "icon-information text-info", title: "Close notifications at the top of the screen after a delay. Does not work with the previous option." }), "Auto close results notifications after", /* @__PURE__ */ e.createElement("input", { type: "number", name: "toast-timeout-s", value: t["toast-timeout-s"] || 5, onChange: n }), "seconds", /* @__PURE__ */ e.createElement("input", { type: "checkbox", name: "auto-close-toasts", checked: t["auto-close-toasts"], onChange: n })), /* @__PURE__ */ e.createElement("label", { htmlFor: "", class: "iref-setting" }, /* @__PURE__ */ e.createElement("i", { class: "icon-information text-info", title: "Hide the left and right sidebars for a cleaner UI with more space." }), "Hide sidebars", /* @__PURE__ */ e.createElement("input", { type: "checkbox", name: "no-sidebars", checked: t["no-sidebars"], onChange: n })), /* @__PURE__ */ e.createElement("label", { htmlFor: "", class: "iref-setting" }, /* @__PURE__ */ e.createElement("i", { class: "icon-information text-info", title: "Folds in the left hand menu so that it only uses icons, to free up even more space for more important stuff." }), "Collapse menu", /* @__PURE__ */ e.createElement("input", { type: "checkbox", name: "collapse-menu", checked: t["collapse-menu"], onChange: n })), /* @__PURE__ */ e.createElement("label", { htmlFor: "", class: "iref-setting" }, /* @__PURE__ */ e.createElement("i", { class: "icon-information text-info", title: "Helpful to figure out why something happened." }), "Show iRefined log messages", /* @__PURE__ */ e.createElement("input", { type: "checkbox", name: "logger", checked: t.logger, onChange: n })))))))), /* @__PURE__ */ e.createElement("div", { class: "modal-footer" }, /* @__PURE__ */ e.createElement("div", null, /* @__PURE__ */ e.createElement("div", { class: "pull-xs-left" }, /* @__PURE__ */ e.createElement("a", { id: "default-close-modal-btn-71327f90-c5eb-2239-da82-fd2d60e5ea02", class: "btn btn-md btn-secondary", "data-testid": "button-close-modal", onClick: l }, /* @__PURE__ */ e.createElement("i", { class: "icon-cancel" }), " Close"), /* @__PURE__ */ e.createElement("a", { id: "reload-ui", class: "btn btn-md btn-secondary", onClick: r }, "Reload UI")), /* @__PURE__ */ e.createElement("div", { class: "pull-xs-right" }, /* @__PURE__ */ e.createElement("span", { class: "m-l-h" }, /* @__PURE__ */ e.createElement("button", { type: "button", class: "btn btn-success", "aria-label": "button", tabindex: "0", onClick: m }, "Save")))))), u = (a) => {
    o(".css-1cojr9x button").click();
    let f = setInterval(() => {
      o("#update-content-modal-modal-dialog") && (clearInterval(f), o("#update-content-modal-modal-dialog").innerHTML = "", o("#update-content-modal-modal-dialog").appendChild(d), o("body").classList.add("iref-settings-panel-open"));
    }, 100);
  }, h = /* @__PURE__ */ e.createElement("button", { type: "button", className: "iref-toolbar-btn", "aria-label": "iRefined", tabindex: "0", onClick: u }, /* @__PURE__ */ e.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "20px", height: "20px", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", class: "lucide lucide-rocket" }, /* @__PURE__ */ e.createElement("path", { d: "M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z" }), /* @__PURE__ */ e.createElement("path", { d: "m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z" }), /* @__PURE__ */ e.createElement("path", { d: "M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0" }), /* @__PURE__ */ e.createElement("path", { d: "M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5" })));
  o("body").appendChild(h);
}
const i = p(import.meta.url), b = "iref-" + i, E = "body";
s.add(i, !0, E, b, g);
//# sourceMappingURL=settings-panel.js.map
