{"version":3,"file":"auto-register.js","sources":["../../src/features/auto-register.js"],"sourcesContent":["import { getFeatureID } from '../helpers/feature-helpers.js';\r\nimport { log } from './logger.js';\r\nimport features from '../feature-manager.js';\r\nimport { findProps, findState } from '../helpers/react-resolver.js';\r\nimport { $, $$ } from 'select-dom';\r\nimport ws from '../helpers/websockets.js';\r\nimport './auto-register.css';\r\n\r\nconst selector = '#season-modal-sessions';\r\nlet persistInterval = 0;\r\n\r\nlet watchQueue = [];\r\n\r\nfunction checkSession(session, queueItem) {\r\n    let isoTime = new Date(session.start_time).toISOString().split('.')[0]+\"Z\";\r\n\r\n    if ( session.season_id === queueItem.season_id ) {\r\n        if (\r\n            session.season_id === queueItem.season_id &&\r\n            session.event_type === 5 &&\r\n            session.start_time === isoTime &&\r\n            session.session_id > 0\r\n        ) {\r\n            log(`📝 Race session for series ${queueItem.season_id}, start ${isoTime} found in data.`);\r\n            watchQueue = watchQueue.filter(item => item.start_time !== queueItem.start_time);\r\n\r\n            ws.withdraw();\r\n\r\n            setTimeout(() => {\r\n                ws.register(queueItem.car_id, queueItem.car_class_id, session.session_id);\r\n            }, 5000);\r\n        }\r\n    }\r\n}\r\n\r\nconst wsCallback = (data) => {\r\n    // loop watchQueue\r\n    watchQueue.forEach(queueItem => {\r\n        try {\r\n            data.data.delta.INSERT.forEach(session => {\r\n                checkSession(session, queueItem);\r\n            })\r\n        } catch {}\r\n\r\n        try {\r\n            data.data.delta.REGISTRATION.forEach(session => {\r\n                checkSession(session, queueItem);\r\n            })\r\n        } catch {}\r\n\r\n    });\r\n}\r\n\r\nws.callbacks.push(wsCallback);\r\n\r\nfunction addToQueue(e) {\r\n    const timestamp = parseInt(e.target.id.replace(/[^0-9]/g, ''));\r\n\r\n    const sessionProps = findProps(e.target);\r\n\r\n    const carState = findState($('#season-modal'), 1);\r\n\r\n    if (!carState.carClassId || !carState.selectedCar.car_id) {\r\n        log(`🚫 No car selected.`);\r\n            e.target.innerHTML = \"Select Car\";\r\n        setTimeout(() => {\r\n            e.target.innerHTML = \"Queue\";\r\n        }, 3000);\r\n\r\n        return;\r\n    }\r\n\r\n    // check if session is already in queue\r\n    if (watchQueue.find(session => session.session_start === timestamp)) {\r\n        log(`📝 Session ${timestamp} already in queue.`);\r\n        return;\r\n    }\r\n    \r\n    watchQueue.push({start_time: timestamp, season_id: sessionProps.contentId, car_id: carState.selectedCar.car_id, car_class_id: carState.carClassId});\r\n\r\n    log(`📝 Added session ${timestamp} for series ${sessionProps.contentId} to queue.`);\r\n\r\n    e.target.classList.add('disabled');\r\n}\r\n\r\nasync function init(activate = true) {\r\n\r\n    if (!activate) {\r\n        clearInterval(persistInterval);\r\n        return;\r\n    }\r\n\r\n    persistInterval = setInterval(() => {\r\n       let buttons = $$('a.btn-success.disabled');\r\n\r\n        if (!buttons) {\r\n            return;\r\n        }\r\n\r\n        buttons.forEach(button => {\r\n            button.classList.add('iref-queue-btn');\r\n            button.classList.remove('disabled', 'btn-success');\r\n            button.innerHTML = \"Queue\";\r\n            button.addEventListener('click', addToQueue);\r\n        });\r\n\r\n    }, 300);\r\n\r\n}\r\n\r\nconst id = getFeatureID(import.meta.url);\r\nconst bodyClass = 'iref-' + id;\r\n\r\nfeatures.add(id, true, selector, bodyClass, init);\r\n"],"names":["selector","persistInterval","watchQueue","checkSession","session","queueItem","isoTime","log","item","ws","wsCallback","data","addToQueue","e","timestamp","sessionProps","findProps","carState","findState","$","init","activate","buttons","$$","button","id","getFeatureID","bodyClass","features"],"mappings":";;;;;;;AAQA,MAAMA,IAAW;AACjB,IAAIC,IAAkB,GAElBC,IAAa,CAAA;AAEjB,SAASC,EAAaC,GAASC,GAAW;AACtC,MAAIC,IAAU,IAAI,KAAKF,EAAQ,UAAU,EAAE,YAAa,EAAC,MAAM,GAAG,EAAE,CAAC,IAAE;AAEvE,EAAKA,EAAQ,cAAcC,EAAU,aAE7BD,EAAQ,cAAcC,EAAU,aAChCD,EAAQ,eAAe,KACvBA,EAAQ,eAAeE,KACvBF,EAAQ,aAAa,MAErBG,EAAI,8BAA8BF,EAAU,SAAS,WAAWC,CAAO,iBAAiB,GACxFJ,IAAaA,EAAW,OAAO,CAAAM,MAAQA,EAAK,eAAeH,EAAU,UAAU,GAE/EI,EAAG,SAAQ,GAEX,WAAW,MAAM;AACb,IAAAA,EAAG,SAASJ,EAAU,QAAQA,EAAU,cAAcD,EAAQ,UAAU;AAAA,EAC3E,GAAE,GAAI;AAGnB;AAEA,MAAMM,IAAa,CAACC,MAAS;AAEzB,EAAAT,EAAW,QAAQ,CAAAG,MAAa;AAC5B,QAAI;AACA,MAAAM,EAAK,KAAK,MAAM,OAAO,QAAQ,CAAAP,MAAW;AACtC,QAAAD,EAAaC,GAASC,CAAS;AAAA,MAC/C,CAAa;AAAA,IACJ,QAAO;AAAA,IAAE;AAEV,QAAI;AACA,MAAAM,EAAK,KAAK,MAAM,aAAa,QAAQ,CAAAP,MAAW;AAC5C,QAAAD,EAAaC,GAASC,CAAS;AAAA,MAC/C,CAAa;AAAA,IACJ,QAAO;AAAA,IAAE;AAAA,EAElB,CAAK;AACL;AAEAI,EAAG,UAAU,KAAKC,CAAU;AAE5B,SAASE,EAAWC,GAAG;AACnB,QAAMC,IAAY,SAASD,EAAE,OAAO,GAAG,QAAQ,WAAW,EAAE,CAAC,GAEvDE,IAAeC,EAAUH,EAAE,MAAM,GAEjCI,IAAWC,EAAUC,EAAE,eAAe,GAAG,CAAC;AAEhD,MAAI,CAACF,EAAS,cAAc,CAACA,EAAS,YAAY,QAAQ;AACtD,IAAAV,EAAI,qBAAqB,GACrBM,EAAE,OAAO,YAAY,cACzB,WAAW,MAAM;AACb,MAAAA,EAAE,OAAO,YAAY;AAAA,IACxB,GAAE,GAAI;AAEP;AAAA,EACH;AAGD,MAAIX,EAAW,KAAK,CAAAE,MAAWA,EAAQ,kBAAkBU,CAAS,GAAG;AACjE,IAAAP,EAAI,cAAcO,CAAS,oBAAoB;AAC/C;AAAA,EACH;AAED,EAAAZ,EAAW,KAAK,EAAC,YAAYY,GAAW,WAAWC,EAAa,WAAW,QAAQE,EAAS,YAAY,QAAQ,cAAcA,EAAS,WAAU,CAAC,GAElJV,EAAI,oBAAoBO,CAAS,eAAeC,EAAa,SAAS,YAAY,GAElFF,EAAE,OAAO,UAAU,IAAI,UAAU;AACrC;AAEA,eAAeO,EAAKC,IAAW,IAAM;AAEjC,MAAI,CAACA,GAAU;AACX,kBAAcpB,CAAe;AAC7B;AAAA,EACH;AAED,EAAAA,IAAkB,YAAY,MAAM;AACjC,QAAIqB,IAAUC,EAAG,wBAAwB;AAExC,IAAKD,KAILA,EAAQ,QAAQ,CAAAE,MAAU;AACtB,MAAAA,EAAO,UAAU,IAAI,gBAAgB,GACrCA,EAAO,UAAU,OAAO,YAAY,aAAa,GACjDA,EAAO,YAAY,SACnBA,EAAO,iBAAiB,SAASZ,CAAU;AAAA,IACvD,CAAS;AAAA,EAEJ,GAAE,GAAG;AAEV;AAEA,MAAMa,IAAKC,EAAa,YAAY,GAAG,GACjCC,IAAY,UAAUF;AAE5BG,EAAS,IAAIH,GAAI,IAAMzB,GAAU2B,GAAWP,CAAI;"}